A happy prime is a number that is both happy and prime.Find the nthHappy prime.
def isPrime(n):
  """Takes an integer.Returns a boolean indicating whether or not its prime."""
  n=abs(n)
  if n<2:
    return False 
  if n==2:
    return True 
  if n%2==0:
    return False 
  maxFactor=round(n**0.5)
  for factor in range(3,maxFactor+1,2):
    if n%factor==0:
      return False 
  return True 
  
def sumOfSquaresOfDigits(n):
  """Takes a non negative integer.
  Returns the sum of squares of its digits."""
  result=0 
  while n>0:
    leftDigit=n%10
    n //=10
    result+=leftDigit**2 
  return result 
def sumOfSquaresOfDigitsTest():
  assert 'sumOfSquaresOfDigits(5)==25'
  assert 'sumOfSquaresOfDigits(12)==5'
  assert 'sumOfSquaresOfDigits(234)==29'
  print("Passed!")
#sumOfSquaresOfDigitsTest()

def isHappyNumber(n):
  """Takes a possibly negative integer.
  Returns True if it is happy and False otherwise."""
  n=abs(n)
  while n>0 and n<10:
    n=sumOfSquaresOfDigits(n)
  return n==1 
def isHappyNumberTest():
  assert 'isHappyNumber(-7) == False'
  assert 'isHappyNumber(1) == True'
  assert 'isHappyNumber(2) == False'
  assert' isHappyNumber(97) == True'
  assert 'isHappyNumber(98) == False'
  assert 'isHappyNumber(404) == True'
  assert 'isHappyNumber(405) == False'
  print("Passed!")

#isHappyNumberTest()

def nthHappyNumber(n):
  """Takes a non-negative integer and returns the nth happy number (where the 0th happy number is 1).
  Calculates happy numbers  less than 1000"""
  result=""
  for i in range(1000):
     if isHappyNumber(i):
        result +=i
  for count in result:
     if int(count)==n:
       return result[int(count)]
def nthHappyNumberTest():
  assert'nthHappyNumber(0) == 1'
  assert'nthHappyNumber(1) == 7'
  assert'nthHappyNumber(2) == 10'
  assert 'nthHappyNumber(3) == 13'
  assert'nthHappyNumber(4) == 19'
  assert 'nthHappyNumber(5) == 23'
  assert 'nthHappyNumber(6) == 28'
  assert 'nthHappyNumber(7) == 31'
  print("Passed!")
#nthHappyNumberTest()
def nthHappyPrime(n):
   return isPrime(nthHappyNumber(n))
def nthHappyPrimeTest():
  assert 'nthHappyPrime(0)==7'
  assert 'nthHappyPrime(1)==13'
  assert 'nthHappyPrime(2)==19'
  print("Passed!")
#nthHappyPrimeTest()
