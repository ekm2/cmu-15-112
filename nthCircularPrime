Write the function nthCircularPrime that takes a non-negative int n and returns the nth Circular prime, which is a prime number that does not contain any 0's and such that all the numbers resulting from rotating its digits are also prime. The first Circular primes are 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97, 113, 131, 197... To see why 197 is a Circular prime, note that 197 is prime, as is 971 (rotated left), as is 719 (rotated left again).

def removeNaught(n):
   """Inputs an integer .
   Returns True if the integer  has no zeros.False if it has zeros."""
   while n>0:
      leftDigit=n%10 
      if leftDigit==0:
        return False 
      n //=10 
   return True 
def removeNaughtTest():
  assert 'removeNaught(1023)==False'
  assert 'removeNaught(123)==True'
  assert 'removeNaught(123056)==False'
  print("Passed!")

removeNaughtTest()
def isPrime(n):
	"""Inputs an integer.Determines if the integer is prime."""
	n=abs(n)
	if n<2:
	  return False 
	if n==2:
	  return True
	if n%2==0:
	  return False 
	maxFactor=round(n**0.5)
	for factor in range(3,maxFactor +1,2):
	  if n%factor==0:
	    return False 
	return True 
	  
def rotateNum(n):
  rotate=n 
  return int(str(rotate)[1:] + str(rotate)[0])

def findCircularPrime():
  "Generates circular primes upto 1000."""
  result=""
  for i in range(1000):
    if removeNaught(i):
      if isPrime(i) and isPrime(rotateNum(i)):
        result +=str(i) 
  return result 
def nthCircularPrime(n):
  """Write the function nthCircularPrime that takes a non-negative int n and returns the nth Circular prime, which is a prime number that does not contain any 0's and such that all the numbers resulting from rotating its digits are also prime. The first Circular primes are 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97, 113, 131, 197... To see why 197 is a Circular prime, note that 197 is prime, as is 971 (rotated left), as is 719 (rotated left again)."""
  result=findCircularPrime()
  return result[n]
  
